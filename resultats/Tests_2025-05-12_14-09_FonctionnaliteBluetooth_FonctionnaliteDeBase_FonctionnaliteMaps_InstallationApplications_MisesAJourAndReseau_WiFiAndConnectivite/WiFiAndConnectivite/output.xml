<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 7.2.2 (Python 3.12.5 on win32)" generated="2025-05-12T14:29:27.917171" rpa="false" schemaversion="5">
<suite id="s1" name="WiFiAndConnectivite" source="C:\Users\bahae\Documents\PfeProject\test_cases\WiFiAndConnectivite.robot">
<kw name="Démarrer Driver" type="SETUP">
<kw name="Setup Driver" owner="Integration">
<msg time="2025-05-12T14:29:42.072960" level="INFO">${driver} = &lt;appium.webdriver.webdriver.WebDriver (session="9956b6a9-f6a8-4851-ae80-e646a22fa155")&gt;</msg>
<var>${driver}</var>
<arg>${Device}</arg>
<doc>Initialise et retourne le driver Appium.</doc>
<status status="PASS" start="2025-05-12T14:29:31.187119" elapsed="10.885841"/>
</kw>
<kw name="Set Suite Variable" owner="BuiltIn">
<msg time="2025-05-12T14:29:42.072960" level="INFO">${driver} = &lt;appium.webdriver.webdriver.WebDriver (session="9956b6a9-f6a8-4851-ae80-e646a22fa155")&gt;</msg>
<arg>${driver}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<status status="PASS" start="2025-05-12T14:29:42.072960" elapsed="0.000000"/>
</kw>
<kw name="Initialize Language Settings">
<kw name="Get System Language" owner="Integration">
<msg time="2025-05-12T14:29:42.159804" level="INFO">${lang} = fr</msg>
<var>${lang}</var>
<arg>${Device}</arg>
<status status="PASS" start="2025-05-12T14:29:42.073960" elapsed="0.085844"/>
</kw>
<kw name="Set Variable If" owner="BuiltIn">
<msg time="2025-05-12T14:29:42.160801" level="INFO">${lang_dict} = {'System': 'Système', 'Setting': 'Paramètres', 'ReseauMenu': 'Réseau et Internet'}</msg>
<var>${lang_dict}</var>
<arg>'${lang}' == 'fr'</arg>
<arg>${LANG_FR}</arg>
<arg>${LANG_EN}</arg>
<doc>Sets variable based on the given condition.</doc>
<status status="PASS" start="2025-05-12T14:29:42.160801" elapsed="0.000000"/>
</kw>
<kw name="Set Suite Variable" owner="BuiltIn">
<msg time="2025-05-12T14:29:42.161783" level="INFO">${LANG_DICT} = {'System': 'Système', 'Setting': 'Paramètres', 'ReseauMenu': 'Réseau et Internet'}</msg>
<arg>${LANG_DICT}</arg>
<arg>${lang_dict}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<status status="PASS" start="2025-05-12T14:29:42.160801" elapsed="0.000982"/>
</kw>
<doc>Sets up language-specific variables based on system language</doc>
<status status="PASS" start="2025-05-12T14:29:42.072960" elapsed="0.088823"/>
</kw>
<doc>Initializes the test driver</doc>
<status status="PASS" start="2025-05-12T14:29:31.185123" elapsed="10.976660"/>
</kw>
<test id="s1-t1" name="Test Ouvrir Wifi" line="142">
<kw name="Execute Test With Retry">
<kw name="Set Variable" owner="BuiltIn">
<msg time="2025-05-12T14:29:42.162781" level="INFO">${attempt} = 1</msg>
<var>${attempt}</var>
<arg>1</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" start="2025-05-12T14:29:42.162781" elapsed="0.000000"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<msg time="2025-05-12T14:29:42.163782" level="INFO">${test_status} = False</msg>
<var>${test_status}</var>
<arg>${FALSE}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" start="2025-05-12T14:29:42.163782" elapsed="0.000000"/>
</kw>
<for flavor="IN RANGE">
<iter>
<kw name="Run Keyword And Return Status" owner="BuiltIn">
<kw name="Execute Open Wifi Test">
<kw name="Open Application With Click" owner="Integration">
<msg time="2025-05-12T14:30:23.582150" level="INFO">Erreur lors de la récupération d'un élément : Message: Cached elements 'By.xpath: //*' do not exist in DOM anymore; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception
Stacktrace:
io.appium.uiautomator2.common.exceptions.StaleElementReferenceException: Cached elements 'By.xpath: //*' do not exist in DOM anymore
	at io.appium.uiautomator2.model.ElementsCache.restore(ElementsCache.java:78)
	at io.appium.uiautomator2.model.ElementsCache.get(ElementsCache.java:153)
	at io.appium.uiautomator2.handler.GetElementAttribute.safeHandle(GetElementAttribute.java:23)
	at io.appium.uiautomator2.handler.request.SafeRequestHandler.handle(SafeRequestHandler.java:59)
	at io.appium.uiautomator2.server.AppiumServlet.handleRequest(AppiumServlet.java:259)
	at io.appium.uiautomator2.server.AppiumServlet.handleHttpRequest(AppiumServlet.java:253)
	at io.appium.uiautomator2.http.ServerHandler.channelRead(ServerHandler.java:77)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:435)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:293)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:267)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:250)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.handler.timeout.IdleStateHandler.channelRead(IdleStateHandler.java:266)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1294)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:911)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:611)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:552)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:466)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:438)
	at io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:140)
	at io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:144)
	at java.lang.Thread.run(Thread.java:1012)


📌 Liste des applications détectées : []
📌 First Home Page détectée : []

📌 Liste des applications détectées : ['Agenda', 'Appium Settings', 'ARD Audiothek', 'Audio Bluetooth', 'Crunchyroll', 'Enregistreur vocal', 'Google Assistant', 'Google\xa0Actualités', 'Home Assistant', 'Local Media Player', 'Maps', 'Paramètres', 'Play\xa0Store', 'Prime Video', 'SMS']
🔄 Swipe en cours...

📌 Liste des applications détectées : ['Spotify', 'Téléphone', 'Vivaldi Browser', 'YouTube', 'TestNotificationapk']
🔄 Swipe en cours...

📌 Liste des applications détectées : ['Agenda', 'Appium Settings', 'ARD Audiothek', 'Audio Bluetooth', 'Crunchyroll', 'Enregistreur vocal', 'Google Assistant', 'Google\xa0Actualités', 'Home Assistant', 'Local Media Player', 'Maps', 'Paramètres', 'Play\xa0Store', 'Prime Video', 'SMS']
🔄 Swipe en cours...

📌 Liste des applications détectées : ['Agenda', 'Appium Settings', 'ARD Audiothek', 'Audio Bluetooth', 'Crunchyroll', 'Enregistreur vocal', 'Google Assistant', 'Google\xa0Actualités', 'Home Assistant', 'Local Media Player', 'Maps', 'Paramètres', 'Play\xa0Store', 'Prime Video', 'SMS']
✅ Retour à la first home page !

📌 Liste des applications détectées : ['Agenda', 'Appium Settings', 'ARD Audiothek', 'Audio Bluetooth', 'Crunchyroll', 'Enregistreur vocal', 'Google Assistant', 'Google\xa0Actualités', 'Home Assistant', 'Local Media Player', 'Maps', 'Paramètres', 'Play\xa0Store', 'Prime Video', 'SMS']
378 619 522 657</msg>
<msg time="2025-05-12T14:30:23.583150" level="INFO">${resultat} = True</msg>
<var>${resultat}</var>
<arg>${driver}</arg>
<arg>${LANG_DICT.Setting}</arg>
<status status="PASS" start="2025-05-12T14:29:42.164782" elapsed="41.418368"/>
</kw>
<kw name="Sleep" owner="BuiltIn">
<msg time="2025-05-12T14:30:24.084032" level="INFO">Slept 500 milliseconds.</msg>
<arg>${QUICK_WAIT}</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="PASS" start="2025-05-12T14:30:23.583150" elapsed="0.500882"/>
</kw>
<kw name="Check Element Exists By Id" owner="Integration">
<msg time="2025-05-12T14:30:25.104093" level="INFO">${Verfier} = True</msg>
<var>${Verfier}</var>
<arg>${driver}</arg>
<arg>${Setting_xpath_id}</arg>
<doc>Vérifie si un élément existe en utilisant son ID.</doc>
<status status="PASS" start="2025-05-12T14:30:24.084032" elapsed="1.020061"/>
</kw>
<kw name="Should Be True" owner="BuiltIn">
<arg>${Verfier}</arg>
<arg>Settings screen is not displayed</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" start="2025-05-12T14:30:25.105094" elapsed="0.000000"/>
</kw>
<kw name="Clique Sur Setting" owner="Integration">
<msg time="2025-05-12T14:30:41.110067" level="INFO">(0, 76, 550, 696)
🔽 Swipe vers le bas #1
🔽 Swipe vers le bas #2
🔽 Swipe vers le bas #3
✅ 'Réseau et Internet' trouvé en bas ! Appui en cours...</msg>
<arg>${driver}</arg>
<arg>${LANG_DICT.ReseauMenu}</arg>
<arg>${Setting_menu}</arg>
<status status="PASS" start="2025-05-12T14:30:25.105094" elapsed="16.004973"/>
</kw>
<kw name="Activer Wifi Si Desactive" owner="Integration">
<msg time="2025-05-12T14:30:42.351841" level="INFO">false</msg>
<arg>${driver}</arg>
<status status="PASS" start="2025-05-12T14:30:41.110067" elapsed="1.241774"/>
</kw>
<kw name="Sleep" owner="BuiltIn">
<msg time="2025-05-12T14:30:44.351949" level="INFO">Slept 2 seconds.</msg>
<arg>${WAIT_TIME}</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="PASS" start="2025-05-12T14:30:42.351841" elapsed="2.000108"/>
</kw>
<kw name="Is Active Wifi Ui" owner="Integration">
<msg time="2025-05-12T14:30:46.880880" level="INFO">État actuel du Wi-Fi : true</msg>
<msg time="2025-05-12T14:30:46.880880" level="INFO">${verifier_wifi_ui} = True</msg>
<var>${verifier_wifi_ui}</var>
<arg>${driver}</arg>
<status status="PASS" start="2025-05-12T14:30:44.352379" elapsed="2.528501"/>
</kw>
<kw name="Run Keyword And Continue On Failure" owner="BuiltIn">
<kw name="Should Be True" owner="BuiltIn">
<arg>${verifier_wifi_ui}</arg>
<arg>WiFi is not active in UI</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" start="2025-05-12T14:30:46.881797" elapsed="0.000000"/>
</kw>
<arg>Should Be True</arg>
<arg>${verifier_wifi_ui}</arg>
<arg>WiFi is not active in UI</arg>
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<status status="PASS" start="2025-05-12T14:30:46.881797" elapsed="0.000000"/>
</kw>
<kw name="Is Wifi Enabled Adb" owner="Integration">
<msg time="2025-05-12T14:30:47.277181" level="INFO">✅ Le Wi-Fi est activé.</msg>
<msg time="2025-05-12T14:30:47.278180" level="INFO">${verfier_wifi_adb} = True</msg>
<var>${verfier_wifi_adb}</var>
<arg>${driver}</arg>
<status status="PASS" start="2025-05-12T14:30:46.881797" elapsed="0.396383"/>
</kw>
<kw name="Run Keyword And Continue On Failure" owner="BuiltIn">
<kw name="Should Be True" owner="BuiltIn">
<arg>${verfier_wifi_adb}</arg>
<arg>WiFi is not active via ADB</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" start="2025-05-12T14:30:47.278180" elapsed="0.000000"/>
</kw>
<arg>Should Be True</arg>
<arg>${verfier_wifi_adb}</arg>
<arg>WiFi is not active via ADB</arg>
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<status status="PASS" start="2025-05-12T14:30:47.278180" elapsed="0.000000"/>
</kw>
<doc>Tests WiFi activation</doc>
<status status="PASS" start="2025-05-12T14:29:42.164782" elapsed="65.113398"/>
</kw>
<msg time="2025-05-12T14:30:47.279181" level="INFO">${test_status} = True</msg>
<var>${test_status}</var>
<arg>${test_keyword}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<status status="PASS" start="2025-05-12T14:29:42.164782" elapsed="65.114399"/>
</kw>
<if>
<branch type="IF" condition="${test_status}">
<kw name="Log" owner="BuiltIn">
<msg time="2025-05-12T14:30:47.279181" level="INFO">Test Test Ouvrir Wifi réussi</msg>
<arg>Test ${test_name} réussi</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-05-12T14:30:47.279181" elapsed="0.000000"/>
</kw>
<kw name="Exit For Loop" owner="BuiltIn">
<msg time="2025-05-12T14:30:47.279181" level="INFO">Exiting for loop altogether.</msg>
<doc>Stops executing the enclosing FOR loop.</doc>
<status status="PASS" start="2025-05-12T14:30:47.279181" elapsed="0.000000"/>
</kw>
<status status="PASS" start="2025-05-12T14:30:47.279181" elapsed="0.000000"/>
</branch>
<branch type="ELSE">
<kw name="Evaluate" owner="BuiltIn">
<var>${attempt}</var>
<arg>${attempt} + 1</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<status status="NOT RUN" start="2025-05-12T14:30:47.279181" elapsed="0.000000"/>
</kw>
<if>
<branch type="IF" condition="${attempt} &lt;= ${MAX_RETRIES}">
<kw name="Log" owner="BuiltIn">
<arg>Test ${test_name} échoué - Tentative ${attempt}/${MAX_RETRIES}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" start="2025-05-12T14:30:47.280661" elapsed="0.000000"/>
</kw>
<kw name="Sleep" owner="BuiltIn">
<arg>${RETRY_DELAY}</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" start="2025-05-12T14:30:47.281173" elapsed="0.000026"/>
</kw>
<status status="NOT RUN" start="2025-05-12T14:30:47.280661" elapsed="0.000538"/>
</branch>
<status status="NOT RUN" start="2025-05-12T14:30:47.280661" elapsed="0.000538"/>
</if>
<status status="NOT RUN" start="2025-05-12T14:30:47.279181" elapsed="0.002018"/>
</branch>
<status status="PASS" start="2025-05-12T14:30:47.279181" elapsed="0.002018"/>
</if>
<var name="${index}">0</var>
<status status="PASS" start="2025-05-12T14:29:42.163782" elapsed="65.117417"/>
</iter>
<var>${index}</var>
<value>${MAX_RETRIES}</value>
<status status="PASS" start="2025-05-12T14:29:42.163782" elapsed="65.117417"/>
</for>
<if>
<branch type="IF" condition="not ${test_status}">
<kw name="Fail" owner="BuiltIn">
<arg>Le test ${test_name} a échoué après ${MAX_RETRIES} tentatives</arg>
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<status status="NOT RUN" start="2025-05-12T14:30:47.281199" elapsed="0.000000"/>
</kw>
<status status="NOT RUN" start="2025-05-12T14:30:47.281199" elapsed="0.000000"/>
</branch>
<status status="PASS" start="2025-05-12T14:30:47.281199" elapsed="0.000000"/>
</if>
<arg>Execute Open Wifi Test</arg>
<arg>Test Ouvrir Wifi</arg>
<status status="PASS" start="2025-05-12T14:29:42.162781" elapsed="65.118418"/>
</kw>
<doc>Teste l'activation du WiFi
- Ouvre les paramètres
- Active le WiFi
- Vérifie l'activation via UI et ADB</doc>
<tag>smoke</tag>
<tag>wifi</tag>
<status status="PASS" start="2025-05-12T14:29:42.161783" elapsed="65.119416"/>
</test>
<test id="s1-t2" name="Test Fermer Wifi" line="150">
<kw name="Execute Test With Retry">
<kw name="Set Variable" owner="BuiltIn">
<msg time="2025-05-12T14:30:47.283189" level="INFO">${attempt} = 1</msg>
<var>${attempt}</var>
<arg>1</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" start="2025-05-12T14:30:47.283189" elapsed="0.000000"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<msg time="2025-05-12T14:30:47.284190" level="INFO">${test_status} = False</msg>
<var>${test_status}</var>
<arg>${FALSE}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" start="2025-05-12T14:30:47.283189" elapsed="0.001001"/>
</kw>
<for flavor="IN RANGE">
<iter>
<kw name="Run Keyword And Return Status" owner="BuiltIn">
<kw name="Execute Close Wifi Test">
<kw name="Open Application With Click" owner="Integration">
<msg time="2025-05-12T14:31:27.032416" level="INFO">Erreur lors de la récupération d'un élément : Message: Cached elements 'By.xpath: //*' do not exist in DOM anymore; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception
Stacktrace:
io.appium.uiautomator2.common.exceptions.StaleElementReferenceException: Cached elements 'By.xpath: //*' do not exist in DOM anymore
	at io.appium.uiautomator2.model.ElementsCache.restore(ElementsCache.java:78)
	at io.appium.uiautomator2.model.ElementsCache.get(ElementsCache.java:153)
	at io.appium.uiautomator2.handler.GetElementAttribute.safeHandle(GetElementAttribute.java:23)
	at io.appium.uiautomator2.handler.request.SafeRequestHandler.handle(SafeRequestHandler.java:59)
	at io.appium.uiautomator2.server.AppiumServlet.handleRequest(AppiumServlet.java:259)
	at io.appium.uiautomator2.server.AppiumServlet.handleHttpRequest(AppiumServlet.java:253)
	at io.appium.uiautomator2.http.ServerHandler.channelRead(ServerHandler.java:77)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:435)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:293)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:267)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:250)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.handler.timeout.IdleStateHandler.channelRead(IdleStateHandler.java:266)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1294)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:911)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:611)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:552)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:466)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:438)
	at io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:140)
	at io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:144)
	at java.lang.Thread.run(Thread.java:1012)


📌 Liste des applications détectées : []
📌 First Home Page détectée : []

📌 Liste des applications détectées : ['Agenda', 'Appium Settings', 'ARD Audiothek', 'Audio Bluetooth', 'Crunchyroll', 'Enregistreur vocal', 'Google Assistant', 'Google\xa0Actualités', 'Home Assistant', 'Local Media Player', 'Maps', 'Paramètres', 'Play\xa0Store', 'Prime Video', 'SMS']
🔄 Swipe en cours...

📌 Liste des applications détectées : ['Agenda', 'Appium Settings', 'ARD Audiothek', 'Audio Bluetooth', 'Crunchyroll', 'Enregistreur vocal', 'Google Assistant', 'Google\xa0Actualités', 'Home Assistant', 'Local Media Player', 'Maps', 'Paramètres', 'Play\xa0Store', 'Prime Video', 'SMS']
✅ Retour à la first home page !

📌 Liste des applications détectées : ['Agenda', 'Appium Settings', 'ARD Audiothek', 'Audio Bluetooth', 'Crunchyroll', 'Enregistreur vocal', 'Google Assistant', 'Google\xa0Actualités', 'Home Assistant', 'Local Media Player', 'Maps', 'Paramètres', 'Play\xa0Store', 'Prime Video', 'SMS']
378 619 522 657</msg>
<msg time="2025-05-12T14:31:27.032416" level="INFO">${resultat} = True</msg>
<var>${resultat}</var>
<arg>${driver}</arg>
<arg>${LANG_DICT.Setting}</arg>
<status status="PASS" start="2025-05-12T14:30:47.285191" elapsed="39.747225"/>
</kw>
<kw name="Sleep" owner="BuiltIn">
<msg time="2025-05-12T14:31:27.533699" level="INFO">Slept 500 milliseconds.</msg>
<arg>${QUICK_WAIT}</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="PASS" start="2025-05-12T14:31:27.032416" elapsed="0.501283"/>
</kw>
<kw name="Check Element Exists By Id" owner="Integration">
<msg time="2025-05-12T14:31:29.562553" level="INFO">${Verfier} = True</msg>
<var>${Verfier}</var>
<arg>${driver}</arg>
<arg>${Setting_xpath_id}</arg>
<doc>Vérifie si un élément existe en utilisant son ID.</doc>
<status status="PASS" start="2025-05-12T14:31:27.533699" elapsed="2.028854"/>
</kw>
<kw name="Should Be True" owner="BuiltIn">
<arg>${Verfier}</arg>
<arg>Settings screen is not displayed</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" start="2025-05-12T14:31:29.562553" elapsed="0.000000"/>
</kw>
<kw name="Clique Sur Setting" owner="Integration">
<msg time="2025-05-12T14:31:31.161056" level="INFO">(0, 76, 550, 696)
✅ 'Réseau et Internet' trouvé sans swipe. Appui en cours...</msg>
<arg>${driver}</arg>
<arg>${LANG_DICT.ReseauMenu}</arg>
<arg>${Setting_menu}</arg>
<status status="PASS" start="2025-05-12T14:31:29.563522" elapsed="1.597534"/>
</kw>
<kw name="Desactiver Wifi Si Active" owner="Integration">
<msg time="2025-05-12T14:31:32.980181" level="INFO">true</msg>
<arg>${driver}</arg>
<status status="PASS" start="2025-05-12T14:31:31.162062" elapsed="1.818119"/>
</kw>
<kw name="Sleep" owner="BuiltIn">
<msg time="2025-05-12T14:31:34.980667" level="INFO">Slept 2 seconds.</msg>
<arg>${WAIT_TIME}</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="PASS" start="2025-05-12T14:31:32.980181" elapsed="2.000486"/>
</kw>
<kw name="Is Active Wifi Ui" owner="Integration">
<msg time="2025-05-12T14:31:37.355818" level="INFO">État actuel du Wi-Fi : false</msg>
<msg time="2025-05-12T14:31:37.355818" level="INFO">${verifier_wifi_ui} = False</msg>
<var>${verifier_wifi_ui}</var>
<arg>${driver}</arg>
<status status="PASS" start="2025-05-12T14:31:34.980667" elapsed="2.375151"/>
</kw>
<kw name="Should Not Be True" owner="BuiltIn">
<arg>${verifier_wifi_ui}</arg>
<arg>WiFi is still active in UI</arg>
<doc>Fails if the given condition is true.</doc>
<status status="PASS" start="2025-05-12T14:31:37.355818" elapsed="0.000000"/>
</kw>
<kw name="Is Wifi Enabled Adb" owner="Integration">
<msg time="2025-05-12T14:31:37.756278" level="INFO">❌ Le Wi-Fi est désactivé.</msg>
<msg time="2025-05-12T14:31:37.756278" level="INFO">${verfier_wifi_adb} = False</msg>
<var>${verfier_wifi_adb}</var>
<arg>${driver}</arg>
<status status="PASS" start="2025-05-12T14:31:37.355818" elapsed="0.400460"/>
</kw>
<kw name="Should Not Be True" owner="BuiltIn">
<arg>${verfier_wifi_adb}</arg>
<arg>WiFi is still active via ADB</arg>
<doc>Fails if the given condition is true.</doc>
<status status="PASS" start="2025-05-12T14:31:37.756278" elapsed="0.000000"/>
</kw>
<doc>Tests WiFi deactivation</doc>
<status status="PASS" start="2025-05-12T14:30:47.285191" elapsed="50.472089"/>
</kw>
<msg time="2025-05-12T14:31:37.757280" level="INFO">${test_status} = True</msg>
<var>${test_status}</var>
<arg>${test_keyword}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<status status="PASS" start="2025-05-12T14:30:47.284190" elapsed="50.473090"/>
</kw>
<if>
<branch type="IF" condition="${test_status}">
<kw name="Log" owner="BuiltIn">
<msg time="2025-05-12T14:31:37.757280" level="INFO">Test Test Fermer Wifi réussi</msg>
<arg>Test ${test_name} réussi</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-05-12T14:31:37.757280" elapsed="0.000000"/>
</kw>
<kw name="Exit For Loop" owner="BuiltIn">
<msg time="2025-05-12T14:31:37.758280" level="INFO">Exiting for loop altogether.</msg>
<doc>Stops executing the enclosing FOR loop.</doc>
<status status="PASS" start="2025-05-12T14:31:37.758280" elapsed="0.000000"/>
</kw>
<status status="PASS" start="2025-05-12T14:31:37.757280" elapsed="0.001000"/>
</branch>
<branch type="ELSE">
<kw name="Evaluate" owner="BuiltIn">
<var>${attempt}</var>
<arg>${attempt} + 1</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<status status="NOT RUN" start="2025-05-12T14:31:37.758280" elapsed="0.000000"/>
</kw>
<if>
<branch type="IF" condition="${attempt} &lt;= ${MAX_RETRIES}">
<kw name="Log" owner="BuiltIn">
<arg>Test ${test_name} échoué - Tentative ${attempt}/${MAX_RETRIES}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" start="2025-05-12T14:31:37.758280" elapsed="0.000000"/>
</kw>
<kw name="Sleep" owner="BuiltIn">
<arg>${RETRY_DELAY}</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" start="2025-05-12T14:31:37.758280" elapsed="0.000000"/>
</kw>
<status status="NOT RUN" start="2025-05-12T14:31:37.758280" elapsed="0.000000"/>
</branch>
<status status="NOT RUN" start="2025-05-12T14:31:37.758280" elapsed="0.000000"/>
</if>
<status status="NOT RUN" start="2025-05-12T14:31:37.758280" elapsed="0.000000"/>
</branch>
<status status="PASS" start="2025-05-12T14:31:37.757280" elapsed="0.002003"/>
</if>
<var name="${index}">0</var>
<status status="PASS" start="2025-05-12T14:30:47.284190" elapsed="50.475093"/>
</iter>
<var>${index}</var>
<value>${MAX_RETRIES}</value>
<status status="PASS" start="2025-05-12T14:30:47.284190" elapsed="50.475093"/>
</for>
<if>
<branch type="IF" condition="not ${test_status}">
<kw name="Fail" owner="BuiltIn">
<arg>Le test ${test_name} a échoué après ${MAX_RETRIES} tentatives</arg>
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<status status="NOT RUN" start="2025-05-12T14:31:37.759283" elapsed="0.000000"/>
</kw>
<status status="NOT RUN" start="2025-05-12T14:31:37.759283" elapsed="0.000000"/>
</branch>
<status status="PASS" start="2025-05-12T14:31:37.759283" elapsed="0.000000"/>
</if>
<arg>Execute Close Wifi Test</arg>
<arg>Test Fermer Wifi</arg>
<status status="PASS" start="2025-05-12T14:30:47.283189" elapsed="50.476094"/>
</kw>
<doc>Teste la désactivation du WiFi
- Ouvre les paramètres
- Désactive le WiFi
- Vérifie la désactivation via UI et ADB</doc>
<tag>smoke</tag>
<tag>wifi</tag>
<status status="PASS" start="2025-05-12T14:30:47.282192" elapsed="50.477091"/>
</test>
<kw name="Fermer Driver" type="TEARDOWN">
<try>
<branch type="TRY">
<kw name="Run Keyword And Return Status" owner="BuiltIn">
<kw name="Get Source" owner="AppiumLibrary">
<kw name="Capture Page Screenshot" owner="AppiumLibrary">
<msg time="2025-05-12T14:31:37.762325" level="FAIL">No application is open</msg>
<doc>Takes a screenshot of the current page and embeds it into the log.</doc>
<status status="FAIL" start="2025-05-12T14:31:37.761279" elapsed="0.006023">No application is open</status>
</kw>
<msg time="2025-05-12T14:31:37.769301" level="WARN">Keyword 'Capture Page Screenshot' could not be run on failure: No application is open</msg>
<msg time="2025-05-12T14:31:37.769301" level="FAIL">No application is open</msg>
<doc>Returns the entire source of the current page.</doc>
<status status="FAIL" start="2025-05-12T14:31:37.761279" elapsed="0.009022">No application is open</status>
</kw>
<msg time="2025-05-12T14:31:37.770301" level="INFO">${session_active} = False</msg>
<var>${session_active}</var>
<arg>Get Source</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<status status="PASS" start="2025-05-12T14:31:37.761279" elapsed="0.009022"/>
</kw>
<if>
<branch type="IF" condition="${session_active}">
<kw name="Close Driver" owner="Integration">
<arg>${driver}</arg>
<doc>Ferme proprement le driver Appium.</doc>
<status status="NOT RUN" start="2025-05-12T14:31:37.770301" elapsed="0.000000"/>
</kw>
<kw name="Log" owner="BuiltIn">
<arg>Driver fermé avec succès</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" start="2025-05-12T14:31:37.770301" elapsed="0.000791"/>
</kw>
<status status="NOT RUN" start="2025-05-12T14:31:37.770301" elapsed="0.000791"/>
</branch>
<branch type="ELSE">
<kw name="Log" owner="BuiltIn">
<msg time="2025-05-12T14:31:37.771185" level="INFO">Le driver n'était pas actif</msg>
<arg>Le driver n'était pas actif</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-05-12T14:31:37.771185" elapsed="0.000000"/>
</kw>
<status status="PASS" start="2025-05-12T14:31:37.771185" elapsed="0.000000"/>
</branch>
<status status="PASS" start="2025-05-12T14:31:37.770301" elapsed="0.000884"/>
</if>
<status status="PASS" start="2025-05-12T14:31:37.761279" elapsed="0.010436"/>
</branch>
<branch type="EXCEPT" assign="${error}">
<kw name="Log" owner="BuiltIn">
<arg>Erreur lors de la fermeture du driver: ${error}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" start="2025-05-12T14:31:37.771715" elapsed="0.000000"/>
</kw>
<status status="NOT RUN" start="2025-05-12T14:31:37.771715" elapsed="0.000000"/>
</branch>
<status status="PASS" start="2025-05-12T14:31:37.760279" elapsed="0.011436"/>
</try>
<doc>Cleans up and closes the test driver</doc>
<status status="PASS" start="2025-05-12T14:31:37.760279" elapsed="0.011876"/>
</kw>
<doc>Tests de connectivité WiFi pour appareil Android
- Activation du WiFi
- Désactivation du WiFi
- Vérification de l'état via UI et ADB
- Prend en charge les interfaces en français et en anglais</doc>
<status status="PASS" start="2025-05-12T14:29:27.919135" elapsed="129.853020"/>
</suite>
<statistics>
<total>
<stat pass="2" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="2" fail="0" skip="0">smoke</stat>
<stat pass="2" fail="0" skip="0">wifi</stat>
</tag>
<suite>
<stat name="WiFiAndConnectivite" id="s1" pass="2" fail="0" skip="0">WiFiAndConnectivite</stat>
</suite>
</statistics>
<errors>
<msg time="2025-05-12T14:31:37.769301" level="WARN">Keyword 'Capture Page Screenshot' could not be run on failure: No application is open</msg>
</errors>
</robot>
