stages:
  - build
  - deploy
  - run
  - run2
  - test

variables:
  IMAGE_NAME: aestoolscelad/flask-app-baha:v4.0


build:
  stage: build
  tags:
    - windows-runner2
  retry: 2
  script:
    - docker compose down

    - docker compose build
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /\[build\]/'
      when: on_success
    - when: never

deploy:
  stage: deploy
  tags:
    - windows-runner2
  retry: 2
  script:
    - docker compose down
    - docker compose up -d --remove-orphans
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /\[deploy\]/'
      when: on_success
    - when: never
run_flask_extern:
  stage: run
  tags:
    - windows-runner2

  before_script:
    - cd ServeurFlaskHost
    - python -m venv venv
    - venv\Scripts\Activate.ps1
    - python -m pip install --upgrade pip
    - pip install -r requirements.txt
  script:
    - Start-Process -NoNewWindow -FilePath "python" -ArgumentList "flaskhost.py"
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /\[run\]/'
      when: on_success
    - when: never

run_tests:
  stage: test
  tags:
    - windows-runner2

  before_script:
    - python -m venv venv
    - venv\Scripts\Activate.ps1
    - python -m pip install --upgrade pip
    - pip install robotframework
    - pip install requests
  script:
    - python execution.py
  retry: 2
  artifacts:
    paths:
      - results/Tests_*.zip
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /\[test\]/'
      when: on_success
    - when: never

run_flask_and_test:
  stage: run2
  tags:
    - windows-runner2

  before_script:
    - cd ServeurFlaskHost
    - python -m venv venv
    - venv\Scripts\Activate.ps1
    - python -m pip install --upgrade pip
    - pip install -r requirements.txt
    - pip install robotframework requests

  script:
    # Démarrer Flask avec vérification explicite
    - $flaskProcess = Start-Process python -ArgumentList "flaskhost.py" -PassThru -RedirectStandardOutput flask.log
    - $flaskProcess.Id | Out-File flask_pid.txt
    - Write-Host "Démarrage de Flask (PID: $($flaskProcess.Id))"

    # Vérification du démarrage avec timeout
    - $timeout = 60  # secondes max d'attente
    - $interval = 5
    - $started = $false
    - for ($i=0; $i -lt $timeout/$interval; $i++) {
        if (Test-NetConnection localhost -Port 5000 | Where-Object { $_.TcpTestSucceeded }) {
          $started = $true
          break
        }
        Start-Sleep -Seconds $interval
        Write-Host "Attente du démarrage du serveur ($($i*$interval)s)..."
      }

    # Gestion des erreurs si échec
    - if (-not $started) {
        Get-Content flask.log
        Write-Error "❌ Échec du démarrage de Flask (timeout après $timeout secondes)" -ErrorAction Stop
      }

    # Exécution des tests
    - Write-Host "✅ Flask démarré avec succès"
    - cd ..
    - docker exec pfeproject-flask-1 python execution.py --list FonctionnaliteMaps.robot

    # Arrêt propre de Flask
    - $pid = Get-Content ServeurFlaskHost/flask_pid.txt
    - Stop-Process -Id $pid -Force -ErrorAction SilentlyContinue

  retry: 2
  artifacts:
    paths:
      - resultats
      - ServeurFlaskHost/flask.log
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /\[run2\]/'
      when: on_success
    - when: never