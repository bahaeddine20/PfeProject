stages:
  - build
  - deploy
  - run
  - run2
  - test
  - fasktest

variables:
  IMAGE_NAME: aestoolscelad/flask-app-baha:v4.0


build:
  stage: build
  tags:
    - python-shell

  retry: 2
  script:
    - docker compose down

    - docker compose build
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /\[build\]/'
      when: on_success
    - when: never

deploy:
  stage: deploy
  tags:
    - python-shell

  retry: 2
  script:
    - docker compose down
    - docker compose up -d --remove-orphans
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /\[deploy\]/'
      when: on_success
    - when: never
run_flask_extern:
  stage: run
  tags:
    - python-shell


  before_script:
    - cd ServeurFlaskHost
    - python -m venv venv
    - venv\Scripts\Activate.ps1
    - python -m pip install --upgrade pip
    - pip install -r requirements.txt
  script:
    - Start-Process -NoNewWindow -FilePath "python" -ArgumentList "flaskhost.py"
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /\[run\]/'
      when: on_success

    - when: never

run_tests:
  stage: test
  tags:
    - python-shell


  before_script:
    - python -m venv venv
    - venv\Scripts\Activate.ps1
    - python -m pip install --upgrade pip
    - pip install robotframework
    - pip install requests
  script:
    - python execution.py
  retry: 2
  artifacts:
    paths:
      - results/Tests_*.zip
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /\[test\]/'
      when: on_success
    - when: never

run_flask_and_test:
  stage: run2
  tags:
    - python-shell
  variables:
    SHELL: "powershell"  # Force l'utilisation de PowerShell Core


  before_script:
    - cd ServeurFlaskHost
    - python -m venv venv
    - ./venv/Scripts/Activate.ps1  # Format correct pour pwsh
    - python -m pip install --upgrade pip
    - pip install -r requirements.txt
    - pip install robotframework requests

  script:
    # Démarrer Flask en arrière-plan
    - $flaskProcess = Start-Process -FilePath "python" -ArgumentList "flaskhost.py" -PassThru -NoNewWindow -RedirectStandardOutput "flask.log" -RedirectStandardError "flask_error.log"
    - $flaskProcess.Id | Out-File -FilePath "flask_pid.txt"
    - Start-Sleep -Seconds 5
    - cd ..

    # Exécuter les tests (reste dans le même répertoire)
    - docker exec pfeproject-flask-1 python execution.py --list   TestsAudio.robot 

    # Créer le dossier resultats_container s'il n'existe pas
    - New-Item -ItemType Directory -Path "resultats_container" -Force

    # Vérifier si le conteneur est en cours d'exécution et copier les résultats
    - $containerStatus = docker ps -q -f name=pfeproject-flask-1
    - if ($containerStatus) {
        Write-Host "Container is running, checking contents...";
        Write-Host "Listing contents of /app in container:";
        docker exec pfeproject-flask-1 ls -la /;
        Write-Host "Listing contents of /resultats in container:";
        docker exec pfeproject-flask-1 ls -la /resultats;
        Write-Host "Copying results...";
        docker cp pfeproject-flask-1:/resultats/. ./resultats_container/;
        Write-Host "Listing contents of local resultats_container:";
        Get-ChildItem -Path "resultats_container" -Recurse;
      } else {
        Write-Host "Container is not running!";
        exit 1;
      }

    # Arrêter Flask proprement
    - if (Test-Path -Path "flask_pid.txt") {
        $flaskId = Get-Content -Path "flask_pid.txt";
        Stop-Process -Id $flaskId -Force -ErrorAction SilentlyContinue;
        Remove-Item -Path "flask_pid.txt" -Force -ErrorAction SilentlyContinue;
      }

  retry: 2
  artifacts:
    paths:
      - resultats_container/
      - ServeurFlaskHost/flask.log
      - ServeurFlaskHost/flask_error.log  # Pour le débogage
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /\[run2\]/'
      when: on_success
    - when: never


