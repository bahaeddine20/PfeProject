stages:
  - build
  - deploy
  - run
  - test

variables:
  IMAGE_NAME: aestoolscelad/flask-app-baha:v4.0
  DOCKER_BUILDKIT: "1"
  COMPOSE_DOCKER_CLI_BUILD: "1"
  GIT_STRATEGY: clone
  GIT_DEPTH: "1"
  GIT_CLEAN_FLAGS: none

before_script:
  - git config --system core.longpaths true
  - git config --global core.longpaths true
  - git config --global --add safe.directory "$CI_PROJECT_DIR"

build:
  stage: build
  tags:
    - windows-runner2
  script:
    - docker system prune -f
    - docker compose build --build-arg BUILDKIT_INLINE_CACHE=1
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /\[build\]/'
      when: on_success
    - when: never

deploy:
  stage: deploy
  tags:
    - windows-runner
  script:
    - docker compose down
    - docker compose up -d --remove-orphans
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /\[deploy\]/'
      when: on_success
    - when: never

run_flask:
  stage: run
  tags:
    - windows-runner2
  before_script:
    - cd ServeurFlaskHost
    - python -m venv venv
    - venv\Scripts\Activate.ps1
    - python -m pip install --upgrade pip
    - pip install -r requirements.txt
  script:
    - python flaskhost.py
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /\[run\]/'
      when: on_success
    - when: never

run_tests:
  stage: test
  tags:
    - windows-runner2
  before_script:
    - python -m venv venv
    - venv\Scripts\Activate.ps1
    - python -m pip install --upgrade pip
    - pip install robotframework
    - pip install requests
  script:
    - $timestamp = Get-Date -Format "yyyy-MM-dd_HH-mm"
    - $results_dir = "test_results_$timestamp"
    - New-Item -ItemType Directory -Path $results_dir
    - New-Item -ItemType Directory -Path "$results_dir/final_report"
    - $test_files = Get-ChildItem -Path "tests" -Filter "*.robot"
    - $total_tests = $test_files.Count
    - $completed = 0
    - $output_files = @()
    - |
      foreach ($test_file in $test_files) {
          $test_name = [System.IO.Path]::GetFileNameWithoutExtension($test_file.Name)
          $test_result_dir = Join-Path $results_dir $test_name
          New-Item -ItemType Directory -Path $test_result_dir -Force
          Write-Host "Ex√©cution du test : $($test_file.Name)"
          robot --outputdir $test_result_dir (Join-Path "tests" $test_file.Name)
          $output_file = Join-Path $test_result_dir "output.xml"
          if (Test-Path $output_file) {
              $output_files += $output_file
          }
          $completed++
          Write-Host "Progression : $completed/$total_tests"
      }
    - |
      if ($output_files.Count -gt 0) {
          rebot --outputdir "$results_dir/final_report" $output_files
      }
    - Compress-Archive -Path "$results_dir/*" -DestinationPath "$results_dir.zip"
    - $auth = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("$env:ARTIFACTORY_USER:$env:ARTIFACTORY_PASSWORD"))
    - $headers = @{
        "Authorization" = "Basic $auth"
        "Content-Type" = "application/zip"
      }
    - $filePath = "$results_dir.zip"
    - $uploadUrl = "$env:ARTIFACTORY_URL/test-results/$CI_COMMIT_SHA/$results_dir.zip"
    - Invoke-RestMethod -Uri $uploadUrl -Method Put -Headers $headers -InFile $filePath
    - Remove-Item -Path $results_dir -Recurse -Force
    - Remove-Item -Path "$results_dir.zip" -Force
  artifacts:
    paths:
      - test_results_*.zip
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /\[test\]/'
      when: on_success
    - when: never