stages:
  - build
  - deploy
  - run
  - test

variables:
  IMAGE_NAME: aestoolscelad/flask-app-baha:v4.0
  DOCKER_BUILDKIT: "1"
  COMPOSE_DOCKER_CLI_BUILD: "1"
  GIT_STRATEGY: clone
  GIT_DEPTH: "1"
  GIT_CLEAN_FLAGS: none

before_script:
  - git config --system core.longpaths true
  - git config --global core.longpaths true
  - git config --global --add safe.directory "$CI_PROJECT_DIR"

build:
  stage: build
  tags:
    - python-shell
  script:
    - docker system prune -f
    - docker compose build --build-arg BUILDKIT_INLINE_CACHE=1
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /\[build\]/'
      when: on_success
    - when: never

deploy:
  stage: deploy
  tags:
    - python-shell
  script:
    - docker compose down
    - docker compose up -d --remove-orphans
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /\[deploy\]/'
      when: on_success
    - when: never

run_flask_extern:
  stage: run
  tags:
    - python-shell
  before_script:
    - cd ServeurFlaskHost
    - python -m venv venv
    - venv\Scripts\Activate.ps1
    - python -m pip install --upgrade pip
    - pip install -r requirements.txt
  script:
    - python flaskhost.py &
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /\[run\]/'
      when: on_success
    - when: never

run_tests:
  stage: test
  tags:
    - python-shell
  before_script:
    - python -m venv venv
    - venv\Scripts\Activate.ps1
    - python -m pip install --upgrade pip
    - pip install robotframework
    - pip install requests
  script:
    - |
      function Execute-TestCommand {
          param (
              [string]$TestsFolder = "tests",
              [string]$ResultsFolder = "results"
          )
          
          # Créer le dossier de résultats avec timestamp
          $timestamp = Get-Date -Format "yyyy-MM-dd_HH-mm"
          $testFiles = Get-ChildItem -Path $TestsFolder -Filter "*.robot"
          $testNames = ($testFiles | ForEach-Object { [System.IO.Path]::GetFileNameWithoutExtension($_.Name) }) -join "_"
          $resultsDir = Join-Path $ResultsFolder "Tests_${timestamp}_${testNames}"
          New-Item -ItemType Directory -Path $resultsDir -Force | Out-Null
          
          # Initialiser les variables de progression
          $totalTests = $testFiles.Count
          $completed = 0
          $outputFiles = @()
          
          # Exécuter chaque test
          foreach ($testFile in $testFiles) {
              $testName = [System.IO.Path]::GetFileNameWithoutExtension($testFile.Name)
              $testResultDir = Join-Path $resultsDir $testName
              New-Item -ItemType Directory -Path $testResultDir -Force | Out-Null
              
              Write-Host "================= $($testFile.Name) ================="
              Write-Host "Exécution du test : $($testFile.Name)"
              
              # Exécuter le test Robot Framework
              $process = Start-Process -FilePath "robot" `
                  -ArgumentList "--outputdir", $testResultDir, (Join-Path $TestsFolder $testFile.Name) `
                  -NoNewWindow -Wait -PassThru -RedirectStandardOutput "output.txt"
              
              # Lire et afficher la sortie
              Get-Content "output.txt" | ForEach-Object { Write-Host $_ }
              Remove-Item "output.txt" -Force
              
              # Vérifier le fichier output.xml
              $outputFile = Join-Path $testResultDir "output.xml"
              if (Test-Path $outputFile) {
                  $outputFiles += $outputFile
              }
              
              Write-Host "--- Exécution du test : $($testFile.Name) ---"
              Write-Host "Code de retour : $($process.ExitCode)"
              Write-Host "----------------------------------------"
              
              $completed++
              $percentage = [math]::Round(($completed / $totalTests) * 100)
              Write-Host "Progression : $completed/$totalTests ($percentage%)"
          }
          
          # Créer le rapport final
          if ($outputFiles.Count -gt 0) {
              $finalReportDir = Join-Path $resultsDir "final_report"
              New-Item -ItemType Directory -Path $finalReportDir -Force | Out-Null
              rebot --outputdir $finalReportDir $outputFiles
          }
          
          # Créer l'archive
          $zipPath = "$resultsDir.zip"
          Compress-Archive -Path "$resultsDir\*" -DestinationPath $zipPath -Force
          
          Write-Host "✅ Tous les tests sont terminés !"
          return $zipPath
      }
      
      # Exécuter les tests
      $zipPath = Execute-TestCommand -TestsFolder "tests" -ResultsFolder "results"
      
      # Upload vers Artifactory
      $auth = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("$env:ARTIFACTORY_USER:$env:ARTIFACTORY_PASSWORD"))
      $headers = @{
          'Authorization' = "Basic $auth"
          'Content-Type' = 'application/zip'
      }
      $uploadUrl = "$env:ARTIFACTORY_URL/test-results/$CI_COMMIT_SHA/$(Split-Path $zipPath -Leaf)"
      Invoke-RestMethod -Uri $uploadUrl -Method Put -Headers $headers -InFile $zipPath
      
      # Nettoyage
      Remove-Item -Path (Split-Path $zipPath -Parent) -Recurse -Force
      Remove-Item -Path $zipPath -Force
  artifacts:
    paths:
      - results/Tests_*.zip
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /\[test\]/'
      when: on_success
    - when: never

