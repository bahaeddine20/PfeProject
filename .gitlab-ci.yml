stages:
  - build
  - deploy
  - run
  - run2
  - test
  - fasktest

variables:
  IMAGE_NAME: aestoolscelad/flask-app-baha:v4.0


build:
  stage: build
  tags:
    - python-shell

  retry: 2
  script:
    - docker compose down

    - docker compose build
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /\[build\]/'
      when: on_success
    - when: never

deploy:
  stage: deploy
  tags:
    - python-shell

  retry: 2
  script:
    - docker compose down
    - docker compose up -d --remove-orphans
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /\[deploy\]/'
      when: on_success
    - when: never
run_flask_extern:
  stage: run
  tags:
    - python-shell


  before_script:
    - cd ServeurFlaskHost
    - python -m venv venv
    - venv\Scripts\Activate.ps1
    - python -m pip install --upgrade pip
    - pip install -r requirements.txt
  script:
    - Start-Process -NoNewWindow -FilePath "python" -ArgumentList "flaskhost.py"
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /\[run\]/'
      when: on_success

    - when: never

run_tests:
  stage: test
  tags:
    - python-shell


  before_script:
    - python -m venv venv
    - venv\Scripts\Activate.ps1
    - python -m pip install --upgrade pip
    - pip install robotframework
    - pip install requests
  script:
    - python execution.py
  retry: 2
  artifacts:
    paths:
      - results/Tests_*.zip
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /\[test\]/'
      when: on_success
    - when: never

run_flask_and_test:
  stage: run2
  tags:
    - python-shell
  variables:
    SHELL: "powershell"  # Force l'utilisation de PowerShell Core


  before_script:
    - cd ServeurFlaskHost
    - python -m venv venv
    - ./venv/Scripts/Activate.ps1  # Format correct pour pwsh
    - python -m pip install --upgrade pip
    - pip install -r requirements.txt
    - pip install robotframework requests

  script:
    # Démarrer Flask en arrière-plan
    - $flaskProcess = Start-Process -FilePath "python" -ArgumentList "flaskhost.py" -PassThru -NoNewWindow -RedirectStandardOutput "flask.log" -RedirectStandardError "flask_error.log"
    - $flaskProcess.Id | Out-File flask_pid.txt
    - Start-Sleep -Seconds 5

    # Créer un volume pour partager les résultats
    - docker volume create test-results

    # Exécuter les tests dans le conteneur avec le volume monté
    - docker run --rm -v test-results:/app/resultats pfeproject-flask-1 python execution.py --list TestsAudio.robot

    # Créer un dossier temporaire pour les résultats
    - New-Item -ItemType Directory -Force -Path "$PWD\latest_results"

    # Copier les résultats du volume vers le dossier local
    - docker run --rm -v test-results:/source -v "$PWD\latest_results:/target" alpine sh -c "cp -r /source/* /target/"

    # Nettoyer le volume
    - docker volume rm test-results

    # Arrêter Flask proprement
    - $flaskId = Get-Content flask_pid.txt
    - Stop-Process -Id $flaskId -Force -ErrorAction SilentlyContinue
    - Remove-Item flask_pid.txt -Force -ErrorAction SilentlyContinue

  retry: 2
  artifacts:
    paths:
      - latest_results
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /\[run2\]/'
      when: on_success
    - when: never




run_flask_and_test2:
  stage: fasktest
  tags:
    - python-shell
  variables:
    SHELL: "powershell"  # Force l'utilisation de PowerShell Core


  before_script:
    - cd ServeurFlaskHost
    - python -m venv venv
    - ./venv/Scripts/Activate.ps1  # Format correct pour pwsh
    - python -m pip install --upgrade pip
    - pip install -r requirements.txt
    - pip install robotframework requests

  script:
    # Démarrer Flask en arrière-plan
    - $flaskProcess = Start-Process -FilePath "python" -ArgumentList "flaskhost.py" -PassThru -NoNewWindow -RedirectStandardOutput "flask.log" -RedirectStandardError "flask_error.log"
    - $flaskProcess.Id | Out-File flask_pid.txt
    - Start-Sleep -Seconds 5

    # Exécuter les tests (reste dans le même répertoire)


  retry: 2
  artifacts:
    paths:
      - resultats
      - ServeurFlaskHost/flask.log
      - ServeurFlaskHost/flask_error.log  # Pour le débogage
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /\[fasktest\]/'
      when: on_success
    - when: never
